<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/posts/Docker/"/>
    <url>/posts/Docker/</url>
    
    <content type="html"><![CDATA[<p>官方文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 首先卸载旧的版本</span><span class="token function">sudo</span> yum remove docker <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine                  <span class="token comment"># 安装环境</span>yum <span class="token function">install</span> -y yum-utils<span class="token comment"># 设置镜像仓库</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># 安装最新版</span>yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token comment"># 启动docker</span>systemctl start docker<span class="token comment"># 查看docker的信息</span>docker version<span class="token comment"># 运行hello world进行测试</span>docker run hello-world<span class="token comment"># 查看镜像</span>docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p><a href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors">https://cr.console.aliyun.com/cn-qingdao/instances/mirrors</a></p><p><img src="/posts/Docker/aliyun-image.png" alt="加速"></p><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p>官方地址：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 基础信息</span>docker versiondocker info<span class="token comment"># 帮助命令</span>docker 命令 --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>镜像查找地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker images <span class="token punctuation">[</span><span class="token punctuation">]</span>-a <span class="token comment"># 列出所有的镜像</span>-q <span class="token comment"># 只显示镜像id</span>常用命令 docker images -aq <span class="token comment"># 显示所有镜像的id</span><span class="token comment"># 查找镜像</span>docker search 镜像docker search 镜像 -f<span class="token operator">=</span>STARS<span class="token operator">=</span><span class="token number">3000</span> 查找star超出3000的镜像<span class="token comment"># 下载镜像</span>docker pull 镜像<span class="token comment"># 删除镜像</span>docker rmi -f 镜像iddocker rmi -r <span class="token variable"><span class="token variable">$(</span>docker images -aq<span class="token variable">)</span></span> <span class="token comment"># 删除所有的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment"># 参数说明</span>--name<span class="token operator">=</span><span class="token string">"Name"</span> <span class="token comment"># 给一个容器命名</span>-d   <span class="token comment"># 以后台方式运行</span>-it           <span class="token comment"># 使用交互方式运行，进入容器查看内容</span>-p            <span class="token comment"># 指定容器的端口 8080:8080 主机端口:容器端口</span>例子：docker run -it centos /bin/bash <span class="token comment"># </span>docker <span class="token function">ps</span> <span class="token comment"># 正在运行中的容器</span>docker <span class="token function">ps</span> -a <span class="token comment"># 历史运行过的容器</span><span class="token builtin class-name">exit</span> <span class="token comment"># 退出容器</span>Ctrl + P + Q <span class="token comment"># 容器不停止退出</span>docker <span class="token function">rm</span> <span class="token comment"># 容器id</span>docker <span class="token function">rm</span> -f <span class="token comment"># 强制删除</span>docker start 容器id <span class="token comment"># 启动停止的容器</span>docker restart 容器id <span class="token comment"># 重启容器</span>docker stop 容器id <span class="token comment"># 停止容器</span>docker <span class="token function">kill</span> 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker logs-t-f--tail <span class="token number">10</span><span class="token comment"># 查看容器中的进程信息</span>docker <span class="token function">top</span> 容器id<span class="token comment"># 查看容器元数据</span>docker inspect 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h3><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 进入容器id</span>docker <span class="token builtin class-name">exec</span> -it 容器id bashshell <span class="token comment"># 打开一个新终端</span>docker attach 容器id <span class="token comment"># 进入容器正在执行的终端</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="从容器内拷贝到主机"><a href="#从容器内拷贝到主机" class="headerlink" title="从容器内拷贝到主机"></a>从容器内拷贝到主机</h3><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker <span class="token function">ps</span> 容器id:文件位置 主机目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="Docker卸载"><a href="#Docker卸载" class="headerlink" title="Docker卸载"></a>Docker卸载</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum remove docker-ce docker-ce-cli containerd.io<span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/posts/Git/"/>
    <url>/posts/Git/</url>
    
    <content type="html"><![CDATA[<p>Git下载地址<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>镜像下载<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config -l# Git安装目录下的gitconfig --system系统级# Git\etc\gitconfiggit config --system --list# 只适用于当前登录用户的配置而--global为全局# C:\Users\use\.gitconfiggit config --global --list# 配置git config --global user.name &quot;你的名字&quot;git config --global user.email &quot;你的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;  # 生成ssh密钥对cat ~&#x2F;.ssh&#x2F;id_rsa.pub # 查看你的 public key（公钥）git config --global core.autocrlf false  # windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示，解决办法ssh -T git@gitee.com  # 首次使用需要确认并添加主机到本机SSH可信列表git init # 项目初始化git add . # 提交到暂存区域git commit # 提交到本地仓库git push # 提交到远程仓库# 克隆一个远程仓库git clone [url]# 状态git status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><blockquote><p>文件4种状态</p></blockquote><p>Untracked：未跟踪。通过git add状态变为staged</p><p>Unmodify：已经入库，未修改。如果被修改，变为Modified，如果使用git rm移出版本库，则成为Untracked文件。</p><p>Modified：已修改。可以通过git add变为stage。使用git checkout丢弃修改内容，返回Unmodify状态</p><p>Staged：暂存状态。</p><h2 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git add . # 添加所有文件到暂存区git commit -m # 提交暂存区的内容到本地仓库，-m 提交信息ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Git分支命令"><a href="#Git分支命令" class="headerlink" title="Git分支命令"></a>Git分支命令</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote&#x2F;branch]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">查看HEAD指向$ cat .git&#x2F;HEAD# 将 master 分支强制指向 HEAD 的第 3 级父提交。git branch -f master HEAD~3# 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。git reset# 为了撤销更改并分享给别人git revert# 下载远程仓库的所有变动$ git fetch [remote]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/posts/Nginx/"/>
    <url>/posts/Nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方网址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><p>首先需要安装依赖</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装gcc gcc-c++</span>yum <span class="token function">install</span> gcc gcc-c++<span class="token comment"># 安装pcre，查看版本号pcre-config -version</span>yum <span class="token function">install</span> -y pcre pcre-devel<span class="token comment"># 安装zlib</span>yum <span class="token function">install</span> -y zlib zlib-devel<span class="token comment"># 安装openssl</span>yum -y <span class="token function">install</span> openssl openssl-devel<span class="token comment"># 安装nginx</span><span class="token comment"># 首先下载安装文件，再解压，进入目录执行./configure，使用make&amp;&amp;make install</span><span class="token function">tar</span> -zxvf nginx-1.20.0.tar.gz./configure --prefix<span class="token operator">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>安装目录默认在/usr/local/nginx中，在sbin文件下有启动脚本</p><p>查看nginx进程</p><p>ps -ef | grep nginx</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看版本号</span>nginx -v<span class="token comment"># 启动</span>nginx<span class="token comment"># 关闭</span>nginx -s stop<span class="token comment"># 重新加载</span>nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>文件位置/usr/local/nginx/conf/nginx.conf</p><h3 id="配置文件中的内容（包含三部分）"><a href="#配置文件中的内容（包含三部分）" class="headerlink" title="配置文件中的内容（包含三部分）"></a><strong>配置文件中的内容（包含三部分）</strong></h3><ol><li><h4 id="全局块：配置服务器整体运行的配置指令"><a href="#全局块：配置服务器整体运行的配置指令" class="headerlink" title="全局块：配置服务器整体运行的配置指令"></a>全局块：配置服务器整体运行的配置指令</h4><p> 从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p></li><li><h4 id="events-块：影响-Nginx-服务器与用户的网络连接"><a href="#events-块：影响-Nginx-服务器与用户的网络连接" class="headerlink" title="events 块：影响 Nginx 服务器与用户的网络连接"></a>events 块：影响 Nginx 服务器与用户的网络连接</h4></li><li><h4 id="http-块"><a href="#http-块" class="headerlink" title="http 块"></a>http 块</h4><p> 包含http全局块、server块</p><p> 每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</p><p> 而每个 server 块也分为全局 server 块，以及可以同时包含多个 location 块。</p></li></ol><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">http &#123;    include       mime.types;    default_type  application&#x2F;octet-stream;    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    #access_log  logs&#x2F;access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server &#123;        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs&#x2F;host.access.log  main;        location &#x2F; &#123;            root   html; # 静态文件地址最前面不加&#x2F;是相对路径，在nginx目录下            index  index.html index.htm;            # autoindex on; 代表在网页上列出        &#125;    &#125;&#125;# location 后跟~代表使用正则表达式# proxy_pass   http:&#x2F;&#x2F;127.0.0.1; 用于反向代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS</title>
    <link href="/posts/CentOS/"/>
    <url>/posts/CentOS/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS环境配置"><a href="#CentOS环境配置" class="headerlink" title="CentOS环境配置"></a>CentOS环境配置</h1><ul><li>阿里云主机换阿里源</li></ul><p><a href="https://developer.aliyun.com/mirror/">https://developer.aliyun.com/mirror/</a></p><ul><li>腾讯云主机换腾讯源</li></ul><p><a href="https://mirrors.cloud.tencent.com/">https://mirrors.cloud.tencent.com/</a></p><p>当然，云服务器一般都自带自己厂商的源</p><p>官方有详细换源教程</p><p>换源完成后运行</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install updateyum install upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><hr><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看开放的端口号firewall-cmd --list-all# 设置开放的端口号firewall-cmd --add-port&#x3D;8080&#x2F;tcp --permanent# 重启防火墙firewall-cmd –reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ul><li>参考官方文档，截止至2020年6月10日，最新的数据库版本为8.0.20，以CentOS7安装MySQL8.0为例。</li></ul><p><a href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html">https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html</a></p><p>寻找想下载的版本从<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a> 处寻找</p><ul><li>第一步卸载默认安装的MariaDB数据库，不和MySQL混淆，以后可以尝试MariaDB数据库</li></ul><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum remove mariadb-libs.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>第二步下载MySQL源，建议乱七八糟的文件下载至 /tmp 目录下，下载地址从上面给的网址中找</li></ul><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;tmpwget https:&#x2F;&#x2F;repo.mysql.com&#x2F;mysql80-community-release-el7-3.noarch.rpmwget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql80-community-release-el7-3.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>第三步安装源</li></ul><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum localinstall mysql80-community-release-el7-3.noarch.rpmyum install -y mysql80-community-release-el7-3.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>第四步安装，这一步可能花费较长时间</li></ul><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install -y mysql-community-server  # 如果已经有云数据库，可以选择不安装服务端，可以只下载客户端，比服务端小得多yum install mysql-community-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>下载完成后启动数据库</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">service mysqld start# 获得默认密码，登录需要cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep &quot;password&quot;# 进入数据库，后接密码mysql -u root -p# 重置密码，注意：不要太过简单# MySQL版本5.7.6以前使用如下命令mysql&gt; set password &#x3D; password(&quot;你的密码&quot;);# MySQL版本5.7.6之后的使用如下命令mysql&gt; alter user user() identified by &quot;你的密码&quot;;# 如果想要远程连接的话需要修改名为“mysql”数据库下的“user”表的内容，同时安全组的3306端口需要打开。当然，允许所有IP以root账号登录是不安全的mysql&gt; show databases;mysql&gt; use mysql;mysql&gt; show tables;mysql&gt; update user set Host &#x3D; &quot;%&quot; where User &#x3D; &quot;root&quot;;# 退出mysql&gt; quit;# 重启数据库service mysqld restart# 如果8.0想要修改密码为空使用下面命令修改策略，其中，validate_password_number_count指定了密码中数据的长度，validate_password_special_char_count指定了密码中特殊字符的长度，validate_password_mixed_case_count指定了密码中大小字母的长度。mysql&gt; set global validate_password.policy&#x3D;0;mysql&gt; set global validate_password.mixed_case_count&#x3D;0;mysql&gt; set global validate_password.special_char_count&#x3D;0;mysql&gt; set global validate_password.number_count&#x3D;0;mysql&gt; set global validate_password.length&#x3D;0;mysql&gt; alter user user() identified by &quot;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>也可以通过docker安装MySQL，比较快</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull mysql:latestdocker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;Qweasdzxc6156805 mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><hr><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><ul><li>首先安装依赖，具体有啥用目前不清楚，看其他教程是这样的，也没有出什么毛病</li></ul><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel  mysql-devel gcc gcc-devel python-devel# 另外一个教程的yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><p>下载Python源代码安装包</p></li><li><p>从此页面中找想要下载的版本<a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a></p></li></ul><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入&#x2F;tmp目录cd &#x2F;tmp# 下载压缩文件，以3.8.3为例，可以使用Xftp将下载好的包直接传到目录下wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.8.3&#x2F;Python-3.8.3.tgz# 解压tar -zxvf Python-3.8.3.tgz# 将文件安装在&#x2F;usr&#x2F;local&#x2F;python3中# 创建文件夹mkdir &#x2F;usr&#x2F;local&#x2F;python3# 设置安装路径cd Python-3.8.3.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3# 安装makemake install# 软链接至&#x2F;usr&#x2F;bin目录下ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip3# 一般此时pip3的版本是比较低的，所以需要更新pip3 install --upgrade pip# 建议安装虚拟环境，以后可以将Python运行环境分开，互不冲突# 建立虚拟环境，以在 ~ 目录下为例，创建以venv命名的虚拟环境cd ~python3 -m venv venv# 如果进入虚拟环境source venv&#x2F;bin&#x2F;activate# 此时的python python3 pip pip3命令都是统一的，在这个环境下pip安装的包只能在这个虚拟环境中使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><hr><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><ul><li><p>有两种安装方法</p></li><li><p>1是安装OpenJDK</p></li><li><p>2是下载压缩文件安装指定版本</p></li></ul><blockquote><p>方法一：</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查找java相关的列表yum -y list java*# 安装jdkyum install java-1.8.0-openjdk.x86_64# 完成安装后验证java -versionjavac -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>方法二：</p></blockquote><p>从<a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a> 网址中找到想要下载的版本</p><p>例如Java8版本的jdk-8u271-linux-x64.tar.gz，通过ftp等方式放到/tmp目录下</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建目录sudo mkdir &#x2F;usr&#x2F;lib&#x2F;jvm# 切换目录cd &#x2F;tmp# 解压缩到jvm目录sudo tar -zxvf jdk-8u271-linux-x64.tar.gz -C &#x2F;usr&#x2F;lib&#x2F;jvm# 环境变量有两种方式# 1.修改&#x2F;etc&#x2F;profile之后让其生效vim &#x2F;etc&#x2F;profile# 在文件最后加入#set oracle jdk environmentexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_271  ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre  export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib  export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH  # 生效， .后面有空格. &#x2F;etc&#x2F;profile# 2.修改bashrcsudo vim ~&#x2F;.bashrc# 在文件最后加入#set oracle jdk environmentexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_271  ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre  export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib  export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH  # 使环境变量马上生效source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(1) CTRL+Z挂起进程并放入后台(2) jobs 显示当前暂停的进程(3) bg %N 使第N个任务在后台运行(%前有空格)(4) fg %N 使第N个任务在前台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>下载地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xvf node-v14.15.4-linux-x64.tar.xz<span class="token function">mkdir</span> /usr/local/nodejs<span class="token function">mv</span> ./node-v14.15.4-linux-x64  /usr/local/nodejs方法一：<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/nodejs/node-v14.15.4-linux-x64/bin方法二：<span class="token function">ln</span> -s /usr/local/nodejs/node-v14.15.4-linux-x64/bin/node /usr/bin/node<span class="token function">ln</span> -s /usr/local/nodejs/node-v14.15.4-linux-x64/bin/npm /usr/bin/npm<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>未完待续。</p><p>以上是看了网上教程并亲自实践整理后的结果。</p><p>如有错误之处，欢迎指出。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派</title>
    <link href="/posts/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <url>/posts/%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="树莓派操作"><a href="#树莓派操作" class="headerlink" title="树莓派操作"></a>树莓派操作</h1><p>默认的用户名: pi，默认的密码是: raspberry</p><p>在内存卡boot盘中新建一个ssh的空文件，为了打开ssh功能。</p><p>在内存卡boot盘中新建一个wpa_supplicant.conf文本文件，写入wifi配置：</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">country</span><span class="token operator">=</span>CN<span class="token assign-left variable">ctrl_interface</span><span class="token operator">=</span>DIR<span class="token operator">=</span>/var/run/wpa_supplicant <span class="token assign-left variable">GROUP</span><span class="token operator">=</span>netdev<span class="token assign-left variable">update_config</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">network</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token assign-left variable">ssid</span><span class="token operator">=</span><span class="token string">"你的无线网名称"</span><span class="token assign-left variable">psk</span><span class="token operator">=</span><span class="token string">"你的无线网密码"</span><span class="token assign-left variable">key_mgmt</span><span class="token operator">=</span>WPA-PSK<span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在树莓派系统内文件位于/etc/wpa_supplicant/wpa_supplicant.conf</p><h2 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h2><blockquote><p>换清华源、安装基础命令</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：</span>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi<span class="token comment"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span>deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>给pip3换成阿里源（自己测试感觉是阿里的源比较全和稳）</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><span class="token comment"># pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/sipmle</span><span class="token comment"># pip config set install.trusted-host pypi.tuna.tsinghua.edu.cn</span><span class="token comment"># 上面的不要看</span><span class="token comment"># 这个命令是本机pip安装时查找的源的位置</span>pip config list -v <span class="token comment"># 打开pip.conf文件，没有就创建目录和文件</span>~/.pip/pip.conf<span class="token comment"># 添加以下内容</span><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> https://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>mirrors.aliyun.compython -m pip <span class="token function">install</span> --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">uname</span> -a<span class="token function">cat</span> /etc/os-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>GPU内存不能拉到812M以上，否则会进不了系统。如果进不去了可以通过SD卡插USB修改config文件。</p><h2 id="wiringPi"><a href="#wiringPi" class="headerlink" title="wiringPi"></a>wiringPi</h2><p>系统自带的一般是2.5.0版本，需要更新到2.5.2版本才能使用gpio readall命令</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 如果没有自带wiringpi</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wiringpi<span class="token comment"># 更新wiringPi</span><span class="token function">wget</span> https://project-downloads.drogon.net/wiringpi-latest.deb<span class="token function">sudo</span> dpkg -i wiringpi-latest.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="安装node-js并换源"><a href="#安装node-js并换源" class="headerlink" title="安装node.js并换源"></a>安装node.js并换源</h2><p>参考网址：<a href="https://github.com/nodesource/distributions/blob/master/README.md">https://github.com/nodesource/distributions/blob/master/README.md</a></p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 先删除自带的低版本nodejs</span><span class="token function">sudo</span> <span class="token function">apt-get</span> remove nodejs<span class="token function">sudo</span> <span class="token function">passwd</span> root<span class="token comment"># Using Debian, as root</span><span class="token function">curl</span> -sL https://deb.nodesource.com/setup_14.x <span class="token operator">|</span> <span class="token function">bash</span> -<span class="token function">apt-get</span> <span class="token function">install</span> -y nodejs<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="安装防火墙"><a href="#安装防火墙" class="headerlink" title="安装防火墙"></a>安装防火墙</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装</span><span class="token function">sudo</span> apt- get <span class="token function">install</span> ufw<span class="token comment"># 启动</span><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span><span class="token comment"># 查看状态</span><span class="token function">sudo</span> ufw status<span class="token comment"># 开启</span><span class="token function">sudo</span> ufw allow <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="配置静态IP地址"><a href="#配置静态IP地址" class="headerlink" title="配置静态IP地址"></a>配置静态IP地址</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/dhcpcd.conf<span class="token comment"># 最后添加以下内容，按照自己的路由器配置来</span>interface wlan0static <span class="token assign-left variable">ip_address</span><span class="token operator">=</span><span class="token number">192.168</span>.1.2/24static <span class="token assign-left variable">routers</span><span class="token operator">=</span><span class="token number">192.168</span>.1.1static <span class="token assign-left variable">domain_name_servers</span><span class="token operator">=</span><span class="token number">114.114</span>.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="树莓派系统设置"><a href="#树莓派系统设置" class="headerlink" title="树莓派系统设置"></a>树莓派系统设置</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> raspi-config<span class="token comment"># 树莓派配置文件 config.txt 官方说明文档：https://www.raspberrypi.org/documentation/configuration/config-txt.md</span><span class="token comment"># VNC开启</span>第五行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="调整CPU频率"><a href="#调整CPU频率" class="headerlink" title="调整CPU频率"></a>调整CPU频率</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Raspberry Pi OS<span class="token function">sudo</span> <span class="token function">nano</span> /boot/config.txtUbuntu OS<span class="token function">sudo</span> <span class="token function">nano</span> /boot/firmware/config.txt超頻<span class="token assign-left variable">over_voltage</span><span class="token operator">=</span><span class="token number">6</span><span class="token assign-left variable">arm_freq</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">gpu_freq</span><span class="token operator">=</span><span class="token number">700</span>超頻MAX<span class="token assign-left variable">over_voltage</span><span class="token operator">=</span><span class="token number">6</span><span class="token assign-left variable">arm_freq</span><span class="token operator">=</span><span class="token number">2147</span><span class="token assign-left variable">gpu_freq</span><span class="token operator">=</span><span class="token number">750</span>CPU最高頻率<span class="token function">sudo</span> <span class="token function">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freqCPU最低頻率<span class="token function">sudo</span> <span class="token function">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freqCPU目前頻率<span class="token function">sudo</span> <span class="token function">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="查看温度"><a href="#查看温度" class="headerlink" title="查看温度"></a>查看温度</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看温度一次</span>vcgencmd measure_temp<span class="token comment"># 每2秒刷新温度</span><span class="token function">watch</span> -n2 vcgencmd measure_temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="搭建文件服务器"><a href="#搭建文件服务器" class="headerlink" title="搭建文件服务器"></a>搭建文件服务器</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> samba<span class="token function">sudo</span> <span class="token function">vim</span> /etc/samba/smb.conf<span class="token comment"># 末尾添加</span><span class="token punctuation">[</span>sun<span class="token punctuation">]</span>comment <span class="token operator">=</span> sun Storagepath <span class="token operator">=</span> /home/pi/sun<span class="token builtin class-name">read</span> only <span class="token operator">=</span> nocreate mask <span class="token operator">=</span> 0777directory mask <span class="token operator">=</span> 0777guest ok <span class="token operator">=</span> <span class="token function">yes</span>browseable <span class="token operator">=</span> <span class="token function">yes</span><span class="token comment"># 重启</span><span class="token function">sudo</span> samba restart<span class="token comment"># 开机自启动</span><span class="token function">sudo</span> update-rc.d samba defaults<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">curl</span> -fsSL https://get.docker.com -o get-docker.sh$ <span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh --mirror Aliyun<span class="token comment"># 将当前用户加入docker组：</span><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装nginx依赖包</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc<span class="token comment"># 安装PCRE库</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpcre3 libpcre3-dev<span class="token comment"># 安装zlib库</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g zlib1g-dev<span class="token comment"># 安装OpenSSL库</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl-dev<span class="token function">tar</span> -zxvf nginx-1.18.0.tar.gz./configure --prefix<span class="token operator">=</span>/usr/local/nginx<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 项目路径 /usr/local/nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="安装Mysql或者是Mariadb"><a href="#安装Mysql或者是Mariadb" class="headerlink" title="安装Mysql或者是Mariadb"></a>安装Mysql或者是Mariadb</h2><p>安装mysql和安装mariadb差不多</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装mariadb</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mariadb-server<span class="token comment"># 修改密码</span><span class="token function">sudo</span> mysqladmin -uroot password <span class="token string">'你的密码'</span><span class="token comment"># 一定要sudo，需要root权限命令</span><span class="token function">sudo</span> mysql -uroot -pflush privileges<span class="token punctuation">;</span><span class="token comment"># 注释本地连接</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/mysql/mariadb.conf.d/50-server.cnf<span class="token comment"># 重启</span><span class="token function">sudo</span> /etc/init.d/mysql restart<span class="token comment"># 修改root用户的连接</span>show databases<span class="token punctuation">;</span>use mysql<span class="token punctuation">;</span>show tables<span class="token punctuation">;</span>update user <span class="token builtin class-name">set</span> Host <span class="token operator">=</span> <span class="token string">"%"</span> where User <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span class="token function">sudo</span> /etc/init.d/mysql restart<span class="token comment"># 卸载</span><span class="token function">sudo</span> <span class="token function">apt-get</span> purge mariadb-*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
